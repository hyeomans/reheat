@doc overview
@id index
@name Connection Guide
@description

# Connection

Reheat uses the [`Connection`](/documentation/api/api/Connection) class to connect to instances of RethinkDB.

Each instance of `Connection` manages a pool of connections to an instance of RethinkDB. The default configuration options
are sufficient for connecting to a default RethinkDB instance on `localhost`. Every `Model` you define needs an
instance of `Connection` in order to operate.

<page-list></page-list>

```js
var r = require('rethinkdb'),
	reheat = require('reheat'),
	Connection = reheat.Connection;

// Connect to a default RethinkDB instance
var connection = new Connection();

connection.run(r.tableList(), function (err, tableList) {
	// A default RethinkDB instance has one db ('test') with no tables
	tableList;  //  [ ]
});
```

@doc overview
@id overview
@name Overview
@description

Reheat uses the [`Connection`](/documentation/api/api/Connection) class to connect to instances of RethinkDB.

Each instance of `Connection` manages a pool of connections to an instance of RethinkDB. The default configuration options
are sufficient for connecting to a default RethinkDB instance on `localhost`. Every `Model` you define needs an
instance of `Connection` in order to operate.

<page-list></page-list>

```js
var r = require('rethinkdb'),
	reheat = require('reheat'),
	Connection = reheat.Connection;

// Connect to a default RethinkDB instance
var connection = new Connection();

connection.run(r.tableList(), function (err, tableList) {
	// A default RethinkDB instance has one db ('test') with no tables
	tableList;  //  [ ]
});
```

@doc overview
@id options
@name Configuration Options
@description

The `Connection` constructor function and [Connection#confgure(options[, strict], cb)](http://reheat/documentation/api/api/Connection.instance_methods:configure)
both accept the same configuration options.

All options:
```js
var reheat = require('reheat'),
    Connection = reheat.Connection;

// Example of all options
var connection = new Connection({
	// RethinkDB options
	port: 28015,
	host: '123.45.67.890',
	db: 'prod',
	authKey: 'mySecret',

	// generic-pool options
	name: 'production_connection',
	max: 20, // maximum number of connections in pool
	min: 10, // minimum number of connections in pool
	log: false,
	idleTimeoutMillis: 30000,
	refreshIdle: true,
	reapIntervalMillis: 1000,
	priorityRange: 5
});
```

@doc overview
@id dynamic
@name Dynamically Configure
@description

The `Connection` constructor function and [Connection#confgure(options[, strict], cb)](http://reheat/documentation/api/api/Connection.instance_methods:configure)
both accept the same configuration options.

All options:
```js
var reheat = require('reheat'),
	Connection = reheat.Connection;

var connection = new Connection({
	{...}
	host: '123.45.67.890',
	db: 'prod',
    {...}
});
```

Uh oh! Lost connection to host '123.45.67.890'.

```js
connection.configure({
	host: '222.33.44.555',
	db: 'prod_backup'
}, function (err) {
	// All connections to `'prod'` on host `123.45.67.890` should have been drained at this point

	// optional, will instakill any connections still waiting on `'prod'` on host `123.45.67.890`
	connection.destroyAllNow();

	// ready to use 'prod_backup' on '222.33.44.555'
});
```


